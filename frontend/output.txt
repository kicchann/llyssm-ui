--- /workspaces/llyssm-ui/frontend/src/hooks/useAnimationFrame.ts ---
import { useCallback, useEffect, useRef } from 'react';

export const useAnimationFrame = (isRunning: boolean, callback: () => void) => {
  const reqIdRef = useRef<number | null>(null);

  const loop = useCallback(() => {
    if (isRunning) {
      reqIdRef.current = requestAnimationFrame(loop);
      callback();
    }
  }, [isRunning, callback]);

  useEffect(() => {
    if (isRunning) {
      reqIdRef.current = requestAnimationFrame(loop);
    }
    return () => {
      if (reqIdRef.current !== null) {
        cancelAnimationFrame(reqIdRef.current);
      }
    };
  }, [loop]);
};


--- /workspaces/llyssm-ui/frontend/src/hooks/useAuthRedirect.tsx ---
import { useEffect } from 'react';
import { useSelector } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import { RootState } from '../store/store'; // ストアの型

export const useAuthRedirect = () => {
  const navigate = useNavigate();
  const isAuthenticated = useSelector(
    (state: RootState) => state.status.isAuthenticated
  );

  useEffect(() => {
    if (!isAuthenticated) {
      navigate('/');
    }
  }, [isAuthenticated, navigate]);
};


--- /workspaces/llyssm-ui/frontend/src/hooks/useFetchLayers.ts ---
import { useEffect } from 'react';
import { useDispatch } from 'react-redux';
import { ApiService } from '../services/apiService';
import { setIsLoading } from '../store/slices/statusSlice';
import { selectLayerDataList } from '../store/slices/viewSlice';

export const useFetchLayers = () => {
  const dispatch = useDispatch();

  useEffect(() => {
    dispatch(setIsLoading(true));
    const fetchLayers = async () => {
      try {
        const data = await ApiService.fetchLayers();
        dispatch(selectLayerDataList(data));
      } catch (error) {
        console.error('Error fetching layers:', error);
      } finally {
        dispatch(setIsLoading(false));
      }
    };
    fetchLayers();
  }, [dispatch]);
};


--- /workspaces/llyssm-ui/frontend/src/hooks/useFetchLocations.ts ---
import { useEffect } from 'react';
import { useDispatch } from 'react-redux';
import { ApiService } from '../services/apiService';
import { selectLocationDataList } from '../store/slices/mapSlice';
import { setIsLoading } from '../store/slices/statusSlice';
import { LocationData } from '../types/location';

export const useFetchLocations = () => {
  const dispatch = useDispatch();

  useEffect(() => {
    dispatch(setIsLoading(true));
    const fetchLocations = async () => {
      try {
        const data: LocationData[] = await ApiService.fetchLocations();
        dispatch(selectLocationDataList(data));
      } catch (error) {
        console.error('Error fetching Locations:', error);
      } finally {
        dispatch(setIsLoading(false));
      }
    };
    fetchLocations();
  }, [dispatch]);
};


--- /workspaces/llyssm-ui/frontend/src/hooks/useFetchMarkers.ts ---
import { useEffect } from 'react';
import { useDispatch } from 'react-redux';
import { ApiService } from '../services/apiService';
import { setIsLoading } from '../store/slices/statusSlice';
import { selectMarkerDataList } from '../store/slices/viewSlice';

export const useFetchMarkers = () => {
  const dispatch = useDispatch();

  useEffect(() => {
    dispatch(setIsLoading(true));
    const fetchMarkers = async () => {
      try {
        const data = await ApiService.fetchMarkers();
        dispatch(selectMarkerDataList(data));
      } catch (error) {
        console.error('Error fetching markers:', error);
      } finally {
        dispatch(setIsLoading(false));
      }
    };
    fetchMarkers();
  }, [dispatch]);
};


--- /workspaces/llyssm-ui/frontend/src/hooks/useFetchSignedUrl.ts ---
import { useEffect, useState } from 'react';
import { ApiService } from '../services/apiService'; // APIサービス

export const useFetchSignedUrl = (fileId: string) => {
  const [signedUrl, setSignedUrl] = useState<string | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchUrl = async () => {
      try {
        const url = await ApiService.getSignedUrl(fileId);
        setSignedUrl(url);
      } catch (err) {
        setError('署名付きURLの取得に失敗しました');
      } finally {
        setLoading(false);
      }
    };

    fetchUrl();
  }, [fileId]);

  return { signedUrl, loading, error };
};


--- /workspaces/llyssm-ui/frontend/src/hooks/useFetchSpheres.ts ---
import { useEffect } from 'react';
import { useDispatch } from 'react-redux';
import { ApiService } from '../services/apiService';
import { setIsLoading } from '../store/slices/statusSlice';
import { selectSphereDataList } from '../store/slices/viewSlice';

export const useFetchSpheres = () => {
  const dispatch = useDispatch();

  useEffect(() => {
    dispatch(setIsLoading(true));
    const fetchSpheres = async () => {
      try {
        const data = await ApiService.fetchSpheres();
        dispatch(selectSphereDataList(data));
      } catch (error) {
        console.error('Error fetching spheres:', error);
      } finally {
        dispatch(setIsLoading(false));
      }
    };
    fetchSpheres();
  }, [dispatch]);
};


--- /workspaces/llyssm-ui/frontend/src/hooks/useFetchUserGeoLocation.ts ---
import { useEffect } from 'react';
import { useDispatch } from 'react-redux';
import { setUserGeoLocation } from '../store/slices/mapSlice';
import { setErrorMessage } from '../store/slices/statusSlice';

export const useFetchUserGeoLocation = () => {
  const dispatch = useDispatch();

  const fetchUserGeoLocation = () => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          dispatch(
            setUserGeoLocation({
              latitude: position.coords.latitude,
              longitude: position.coords.longitude,
            })
          );
        },
        (error) => {
          dispatch(setErrorMessage('現在位置の取得に失敗しました'));
          console.error('Error retrieving location:', error);
        }
      );
    } else {
      dispatch(
        setErrorMessage('Geolocationがこのブラウザでサポートされていません')
      );
      console.error('Geolocation is not supported by this browser.');
    }
  };

  useEffect(() => {
    fetchUserGeoLocation();
  }, []);
};


--- /workspaces/llyssm-ui/frontend/src/hooks/useMediaQuery.ts ---
import { useMediaQuery as muiUseMediaQuery, useTheme } from '@mui/material';

// MUIのブレークポイントシステムに対応した定義
export const mediaQuery = {
  mobile: 'down', // スマートフォンサイズ
  tablet: 'between', // タブレットサイズ
  pc: 'up', // PCサイズ
};

// ブレークポイントに基づいてクエリを生成
export const useMediaQuery = (queryKey: keyof typeof mediaQuery) => {
  const theme = useTheme(); // MUIのテーマを取得
  let query: string;

  // 必要に応じて適切なクエリを作成
  switch (queryKey) {
    case 'mobile':
      query = theme.breakpoints.down('sm'); // スマートフォンサイズ（小さい画面）
      break;
    case 'tablet':
      query = theme.breakpoints.between('sm', 'md'); // タブレットサイズ
      break;
    case 'pc':
      query = theme.breakpoints.up('md'); // PCサイズ
      break;
    default:
      throw new Error(`Invalid queryKey: ${queryKey}`);
  }

  const matches = muiUseMediaQuery(query); // MUIのuseMediaQueryを使用

  return matches; // true/falseを返す
};

