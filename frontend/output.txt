--- /workspaces/llyssm-ui/frontend/src/components/molecules/CustomTooltip.tsx ---
import React from 'react';
import styled from 'styled-components';
import { MarkerData } from '../../types/marker';

// スタイルの定義
// CustomTooltipはあとで静的なHTMLとして描画するため、styled-componentsを使ってスタイルを定義
// MUIは使わない
const StyledWrapper = styled.div`
  max-width: none;
  padding: 0;
  box-shadow: 0 0 0 2px white;
`;

const StyledImage = styled.img`
  width: 100%;
  border-radius: 4px 4px 0 0;
  padding: 30;
`;

const StyledContent = styled.article`
  margin: 1rem;
  text-align: justify;
`;

const StyledTitle = styled.h2`
  margin: 0;
`;

const StyledText = styled.p`
  margin: 0;
`;

interface CustomTooltipProps {
  markerData: MarkerData;
}

export const CustomTooltip: React.FC<CustomTooltipProps> = ({ markerData }) => {
  return (
    <>
      {/* Tooltip内容 */}
      <StyledWrapper className="custom-tooltip">
        <StyledImage src={markerData.thumbnailUrl} alt={markerData.name} />
        <StyledContent>
          <StyledTitle>{markerData.name}</StyledTitle>
          <StyledText>{markerData.description}</StyledText>
        </StyledContent>
      </StyledWrapper>
    </>
  );
};


--- /workspaces/llyssm-ui/frontend/src/components/molecules/DrawerNode.tsx ---
import { Layers } from '@mui/icons-material';
import CloseIcon from '@mui/icons-material/Close';
import { Box, Drawer, IconButton, styled } from '@mui/material';
import React, { useState } from 'react';

const DrawerBox = styled(Box)`
  width: 300px;
  padding: 16px;
  padding-top: 48px; /* 閉じるボタン分のスペースを確保 */
  position: relative;
`;

const CloseButtonBox = styled(Box)`
  position: absolute;
  top: 8; /* ボタンを右上に固定 */
  right: 8;
`;

interface DrawerNodeProps {
  content: React.ReactNode;
}

export const DrawerNode: React.FC<DrawerNodeProps> = ({ content }) => {
  const [isOpen, setIsOpen] = useState(false);

  const toggleDrawer = (open: boolean) => () => {
    setIsOpen(open);
  };

  return (
    <>
      {/* メニューを開くボタン */}
      <IconButton onClick={toggleDrawer(true)} color="inherit">
        <Layers />
      </IconButton>

      {/* 右からスライドするメニュー */}
      <Drawer anchor="right" open={isOpen} onClose={toggleDrawer(false)}>
        <DrawerBox role="presentation">
          {/* 閉じるボタン */}
          <CloseButtonBox>
            <IconButton onClick={toggleDrawer(false)}>
              <CloseIcon />
            </IconButton>
          </CloseButtonBox>
          {content}
        </DrawerBox>
      </Drawer>
    </>
  );
};


--- /workspaces/llyssm-ui/frontend/src/components/molecules/LocationTooltip.tsx ---
import { Box } from '@mui/material';
import 'leaflet/dist/leaflet.css';
import React from 'react';
import { Marker, Popup } from 'react-leaflet';
import { LocationData } from '../../types/map';
import { getLocationIcon } from '../../utils/mapUtils';

interface LocationTooltipProps {
  locationData: LocationData;
  onClick: (event: React.MouseEvent, itemId: string) => void;
}

export const LocationTooltip: React.FC<LocationTooltipProps> = ({
  locationData: data,
  onClick: onPopupClick,
}) => {
  return (
    <Marker
      position={[data.geoLocation.latitude, data.geoLocation.longitude]}
      icon={getLocationIcon(data.iconType)}
    >
      <Popup>
        <Box onClick={(event) => onPopupClick(event, data.id)}>
          <h3>{data.name}</h3>
          <p>{data.description}</p>
          <p>クリックで詳細ページへ</p>
        </Box>
      </Popup>
    </Marker>
  );
};


--- /workspaces/llyssm-ui/frontend/src/components/molecules/ModalNode.tsx ---
import CloseIcon from '@mui/icons-material/Close';
import { Box, IconButton, Modal, styled } from '@mui/material';
import React, { useEffect } from 'react';

interface ModalNodeProps {
  open: boolean;
  onClose: () => void;
  content: React.ReactNode;
}

const StyledModalBox = styled(Box)`
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 85%;
  max-width: 800px;
  background-color: rgba(0, 0, 0, 0.2);
  padding: 8px;
  max-height: 90vh;
  overflow-y: auto;
  padding-top: 36; /* 閉じるボタン分のスペースを確保 */
`;

const StyledIconButton = styled(IconButton)`
  position: absolute;
  top: 0;
  right: 0;
  color: white;
`;

export const ModalNode: React.FC<ModalNodeProps> = ({
  open,
  onClose,
  content,
}) => {
  // ESCキーでモーダルを閉じる
  useEffect(() => {
    const handleEsc = (event: KeyboardEvent) => {
      if (event.key === 'Escape') {
        onClose();
      }
    };
    document.addEventListener('keydown', handleEsc);

    return () => {
      document.removeEventListener('keydown', handleEsc);
    };
  }, [onClose]);

  return (
    <Modal
      open={open}
      onClose={onClose}
      aria-labelledby="marker-modal-title"
      aria-describedby="marker-modal-description"
    >
      <StyledModalBox>
        <StyledIconButton onClick={onClose}>
          <CloseIcon />
        </StyledIconButton>
        {content}
      </StyledModalBox>
    </Modal>
  );
};


--- /workspaces/llyssm-ui/frontend/src/components/molecules/SettingMenu.tsx ---
import { MoreVert } from '@mui/icons-material';
import { IconButton } from '@mui/material';
import React from 'react';
import { useNavigate } from 'react-router-dom';

export const MoreMenu: React.FC = () => {
  const navigate = useNavigate();

  const handleSettingsClick = () => {
    navigate('/setting');
  };

  return (
    <IconButton
      edge="start"
      color="inherit"
      aria-label="menu"
      onClick={handleSettingsClick}
    >
      <MoreVert />
    </IconButton>
  );
};


--- /workspaces/llyssm-ui/frontend/src/components/molecules/Sidebar.tsx ---
import { styled } from '@mui/material';

const SidebarWrapper = styled('div')`
  display: flex;
  flex-direction: row;
  position: relative;
`;

const SidebarContainer = styled('div')<{ isOpen: boolean }>`
  overflow-y: auto;
  background-color: #fff;
  transition:
    width 0.3s ease,
    padding 0.3s ease;
  box-shadow: ${({ isOpen }) =>
    isOpen ? '2px 0 5px rgba(0, 0, 0, 0.1)' : 'none'};
  width: ${({ isOpen }) => (isOpen ? 'var(--sidebar-width, 300px)' : '0')};
  padding: ${({ isOpen }) => (isOpen ? '10px' : '0')};
`;

interface SidebarProps {
  isOpen: boolean;
  content: React.ReactNode;
}

export const Sidebar: React.FC<SidebarProps> = ({ isOpen, content }) => {
  return (
    <SidebarWrapper>
      <SidebarContainer isOpen={isOpen} aria-hidden={!isOpen} role="region">
        {content}
      </SidebarContainer>
    </SidebarWrapper>
  );
};


--- /workspaces/llyssm-ui/frontend/src/components/molecules/TreeNode.tsx ---
import { TreeItem } from '@mui/x-tree-view/TreeItem';
import React from 'react';

interface TreeNodeProps {
  id: string;
  label: string;
  children?: React.ReactNode;
  onItemClick: (event: React.SyntheticEvent, itemId: string) => void;
  isSelected?: boolean;
}

export const TreeNode: React.FC<TreeNodeProps> = ({
  id,
  label,
  children,
  onItemClick,
  isSelected,
}) => {
  return (
    <TreeItem
      key={id}
      itemId={id}
      label={label}
      onClick={(event) => onItemClick(event, id)}
      sx={
        {
          backgroundColor: isSelected ? 'rgba(0, 0, 0, 0.1)' : 'transparent',
          color: 'black',
        }
      }
    >
      {children}
    </TreeItem>
  );
};


--- /workspaces/llyssm-ui/frontend/src/components/molecules/YawPitchDisplay.tsx ---
import { Box, styled } from '@mui/material';
import React from 'react';
import { Label } from '../atoms/Label';

interface YawPitchDisplayProps {
  yaw: number;
  pitch: number;
}

const StyledBox = styled(Box)`
  position: absolute;
  bottom: 45;
  right: 10;
  background-color: rgba(0, 0, 0, 0.5);
  padding: 5px 10px;
  border-radius: 5px;
`;

export const YawPitchDisplay: React.FC<YawPitchDisplayProps> = ({
  yaw,
  pitch,
}) => {
  return (
    <StyledBox>
      <Label text={`Yaw: ${yaw.toFixed(1)}°`} color="white" />
      <Label text={`Pitch: ${pitch.toFixed(1)}°`} color="white" />
    </StyledBox>
  );
};

